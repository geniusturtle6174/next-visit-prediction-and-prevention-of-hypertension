import matplotlib.pyplot as plt
import numpy as np

plt.rcParams["savefig.directory"] = '.'

# # ============================== 來訪次數分布 ==============================

# visit_count_distru = np.array([
#     [1, 123595, 58007, 65588],
#     [2, 40838, 20037, 20801],
#     [3, 20336, 10452, 9884],
#     [4, 10564, 5708, 4856],
#     [5, 4672, 2616, 2056],
#     [6, 3476, 1985, 1491],
#     [7, 2278, 1331, 947],
#     [8, 1683, 1016, 667],
#     [9, 32, 25, 7],
#     [10, 8, 7, 1],
#     [11, 1, 1, 0],
#     [12, 2, 1, 1],
#     [14, 1, 1, 0],
#     [16, 2, 1, 1],
# ])

# plt.figure()
# plt.bar(
#     visit_count_distru[:9, 0],
#     np.hstack((
#         visit_count_distru[:8, 1],
#         np.sum(visit_count_distru[8:, 1]),
#     )),
#     width=1,
# )
# plt.xticks([1, 3, 5, 7, 9], ['1', '3', '5', '7', '9 or more'])
# plt.yscale('log')
# plt.xlabel('Visit Count')
# plt.ylabel('People Count (log scale)')
# plt.legend()
# plt.show()

# # ============================== 來訪間隔分布 ==============================

# visit_interval_distru = np.array([
#     [0.0833, 5, 3, 2],
#     [0.1667, 12, 8, 4],
#     [0.25, 52, 22, 30],
#     [0.3333, 81, 45, 36],
#     [0.4167, 106, 52, 54],
#     [0.5, 265, 159, 106],
#     [0.5833, 430, 260, 170],
#     [0.6667, 798, 441, 357],
#     [0.75, 1785, 1010, 775],
#     [0.8333, 5002, 2832, 2170],
#     [0.9167, 17181, 9761, 7420],
#     [1.0, 48283, 27076, 21207],
#     [1.0833, 21460, 11866, 9594],
#     [1.1667, 9210, 4890, 4320],
#     [1.25, 5266, 2718, 2548],
#     [1.3333, 3544, 1782, 1762],
#     [1.4167, 2872, 1373, 1499],
#     [1.5, 2615, 1329, 1286],
#     [1.5833, 2243, 1108, 1135],
#     [1.6667, 2090, 1105, 985],
#     [1.75, 2221, 1084, 1137],
#     [1.8333, 2830, 1409, 1421],
#     [1.9167, 5340, 2680, 2660],
#     [2.0, 10615, 5545, 5070],
#     [2.0833, 6207, 3253, 2954],
#     [2.1667, 3202, 1575, 1627],
#     [2.25, 2048, 1040, 1008],
#     [2.3333, 1584, 824, 760],
#     [2.4167, 1168, 563, 605],
#     [2.5, 1030, 508, 522],
#     [2.5833, 879, 410, 469],
#     [2.6667, 796, 374, 422],
#     [2.75, 764, 375, 389],
#     [2.8333, 781, 367, 414],
#     [2.9167, 1084, 508, 576],
#     [3.0, 1513, 759, 754],
#     [3.0833, 1090, 532, 558],
#     [3.1667, 697, 343, 354],
#     [3.25, 561, 267, 294],
#     [3.3333, 504, 245, 259],
#     [3.4167, 362, 179, 183],
#     [3.5, 315, 159, 156],
#     [3.5833, 287, 143, 144],
#     [3.6667, 255, 131, 124],
#     [3.75, 269, 124, 145],
#     [3.8333, 266, 145, 121],
#     [3.9167, 409, 205, 204],
#     [4.0, 521, 256, 265],
#     [4.0833, 380, 194, 186],
#     [4.1667, 313, 152, 161],
#     [4.25, 217, 99, 118],
#     [4.3333, 194, 97, 97],
#     [4.4167, 181, 88, 93],
#     [4.5, 175, 88, 87],
#     [4.5833, 227, 104, 123],
#     [4.6667, 173, 83, 90],
#     [4.75, 117, 57, 60],
#     [4.8333, 136, 57, 79],
#     [4.9167, 155, 71, 84],
#     [5.0, 170, 77, 93],
#     [5.0833, 126, 50, 76],
#     [5.1667, 130, 59, 71],
#     [5.25, 104, 46, 58],
#     [5.3333, 106, 48, 58],
#     [5.4167, 114, 52, 62],
#     [5.5, 93, 46, 47],
#     [5.5833, 74, 30, 44],
#     [5.6667, 68, 26, 42],
#     [5.75, 49, 25, 24],
#     [5.8333, 57, 19, 38],
#     [5.9167, 82, 41, 41],
#     [6.0, 88, 46, 42],
#     [6.0833, 63, 29, 34],
#     [6.1667, 70, 36, 34],
#     [6.25, 104, 68, 36],
#     [6.3333, 114, 74, 40],
#     [6.4167, 35, 17, 18],
#     [6.5, 34, 17, 17],
#     [6.5833, 28, 15, 13],
#     [6.6667, 31, 15, 16],
#     [6.75, 17, 8, 9],
#     [6.8333, 25, 13, 12],
#     [6.9167, 27, 7, 20],
#     [7.0, 34, 19, 15],
#     [7.0833, 30, 11, 19],
#     [7.1667, 18, 6, 12],
#     [7.25, 10, 4, 6],
#     [7.3333, 15, 9, 6],
#     [7.4167, 12, 5, 7],
#     [7.5, 13, 6, 7],
#     [7.5833, 11, 6, 5],
#     [7.75, 3, 1, 2],
#     [7.8333, 1, 0, 1],
# ])

# plt.figure()
# plt.bar(
#     visit_interval_distru[:, 0],
#     visit_interval_distru[:, 1],
#     width=1/12,
# )
# plt.yscale('log')
# plt.xlabel('Interval of Neighboring Visits (year)')
# plt.ylabel('People Count')

# # ============================== 訓練與測試集的輸入來訪次數分布 ==============================

visit_cnt_train = [17587, 9458, 4286, 3387, 5770]
visit_cnt_test = [36111, 17577, 9457, 4286, 7371]

# # ============================== 分來訪次數的辨識率 ==============================

x = [1, 2, 3, 4, 5]
people_cnt = [36111, 17577, 9457, 4286, 7371]
p_recog = [0.6752421541514729, 0.6944012440599686, 0.7127487894801644, 0.7239792980310642, 0.7445797443586042]
r_recog = [0.7652586281930922, 0.7822354588678634, 0.7998792632659586, 0.7815021720785212, 0.7996810204785707]
f_recog = [0.717437341511741, 0.7357055487729369, 0.7538040811632943, 0.7516412913263284, 0.7711468396799205]
p_naive = [0.7037732474334967, 0.7200216059200537, 0.7274153071745875, 0.7444816048531895, 0.7607318786908052]
r_naive = [0.6912268375611463, 0.7005956550980035, 0.699969815665569, 0.6908752323458254, 0.6896331736237215]
f_naive = [0.6974431223262628, 0.7101753124344284, 0.713428203242141, 0.7166768988196572, 0.7234393537287584]

# plt.figure()
# plt.plot(x, p_recog, 'o-', label='Precision (Ours)')
# plt.plot(x, r_recog, 'x-', label='Recall (Ours)')
# plt.plot(x, f_recog, 'd-', label='F1-score (Ours)')
# plt.plot(x, p_naive, 'o--', label='Precision (Baseline)')
# plt.plot(x, r_naive, 'x--', label='Recall (Baseline)')
# plt.plot(x, f_naive, 'd--', label='F-score (Baseline)')
# plt.xlabel('Visit Count')
# plt.xticks(x)
# plt.ylim([0.60, 0.805])
# plt.legend(loc='lower right')

fig, ax1 = plt.subplots()
# ax2 = ax1.twinx()
p_ours = ax1.plot(x, p_recog, 'o-', label='Precision (ours)')
r_ours = ax1.plot(x, r_recog, 'x-', label='Recall (ours)')
f_ours = ax1.plot(x, f_recog, 'd-', label='F1-score (ours)')
p_base = ax1.plot(x, p_naive, 'o--', label='Precision (baseline)')
r_base = ax1.plot(x, r_naive, 'x--', label='Recall (baseline)')
f_base = ax1.plot(x, f_naive, 'd--', label='F-score (baseline)')
# pl_cnt = ax2.plot(x, people_cnt, '+-', label='People count')

ax1.set_xlabel('Visit Count')
ax1.set_xticks(x)
ax1.set_ylim([0.60, 0.85])
ax1.set_ylabel('Performance Metric')
# ax2.set_ylabel('People count')
# ax2.set_ylim([3500, 37000])

lns = p_ours + r_ours + f_ours + p_base + r_base + f_base #+ pl_cnt
labs = [l.get_label() for l in lns]
ax1.legend(lns, labs, loc='lower center')

# # ============================== 全部以及分有無病史的辨識率 ==============================

# 格式：全部/有病史/無病史
people_cnt = [74802, 29566, 45236]
# p_recog = [0.6964, 0.7260881618786451, 0.431448763098428]
# r_recog = [0.7774, 0.9359301612754783, 0.21936758889339425]
# f_recog = [0.7347, 0.8177616240437391, 0.29085234006830435]
# p_fram = [0.6791, 0.739700945954937, 0.3578193577367014]
# r_fram = [0.7361, 0.8662446395310269, 0.27829680196221757]
# f_fram = [0.7065, 0.79798666416492, 0.313086925639393]
# p_naive = [0.7198, 0.7197790874698191, 0.0]
# r_naive = [0.6943, 0.891566265014725, 0.0]
# f_naive = [0.7068, 0.79651497849818, 0.0]
p_recog = [None, 0.7261302560572981, 0.4276707529150015]
r_recog = [None, 0.9380232795110259, 0.21936758889339425]
f_recog = [None, 0.8185863386857118, 0.28998886418553504]
p_naive = [None, 0.7197790874698191, 0.0]
r_naive = [None, 0.891566265014725, 0.0]
f_naive = [None, 0.79651497849818, 0.0]
measures = ['Precision', 'Recall', 'F1-score']
x = np.arange(len(measures))
width = 0.3

plt.figure()

# plt.subplot(1, 3, 1)
# plt.bar(x - width, [p_naive[0], r_naive[0], f_naive[0]], width, label='Baseline')
# plt.bar(x, [p_fram[0], r_fram[0], f_fram[0]], width, label='Framingham')
# plt.bar(x + width, [p_recog[0], r_recog[0], f_recog[0]], width, label='Ours')
# plt.title('Overall\n{} people'.format(people_cnt[0]))
# plt.xticks(x, measures)
# plt.legend(loc='lower left')
# plt.ylim([0, 1])

# plt.subplot(1, 3, 2)
# plt.bar(x - width, [p_naive[1], r_naive[1], f_naive[1]], width, label='Baseline')
# plt.bar(x, [p_fram[1], r_fram[1], f_fram[1]], width, label='Framingham')
# plt.bar(x + width, [p_recog[1], r_recog[1], f_recog[1]], width, label='Ours')
# plt.title('Has Hypertension in the Past\n{} people'.format(people_cnt[1]))
# plt.xticks(x, measures)
# plt.legend(loc='lower left')
# plt.ylim([0, 1])

# plt.subplot(1, 3, 3)
# plt.bar(x - width, [p_naive[2], r_naive[2], f_naive[2]], width, label='Baseline')
# plt.bar(x, [p_fram[2], r_fram[2], f_fram[2]], width, label='Framingham')
# plt.bar(x + width, [p_recog[2], r_recog[2], f_recog[2]], width, label='Ours')
# plt.title('No Hypertension in the Past\n{} people'.format(people_cnt[2]))
# plt.xticks(x, measures)
# plt.legend(loc='lower left')
# plt.ylim([0, 1])

plt.subplot(1, 2, 1)
plt.bar(x - width/2, [p_naive[1], r_naive[1], f_naive[1]], width, label='Baseline')
plt.bar(x + width/2, [p_recog[1], r_recog[1], f_recog[1]], width, label='Ours')
plt.title('Has Hypertension in the Past')
plt.xticks(x, measures)
plt.legend(loc='upper left')
plt.ylim([0, 1])

plt.subplot(1, 2, 2)
plt.bar(x - width/2, [p_naive[2], r_naive[2], f_naive[2]], width, label='Baseline')
plt.bar(x + width/2, [p_recog[2], r_recog[2], f_recog[2]], width, label='Ours')
plt.title('No Hypertension in the Past')
plt.xticks(x, measures)
plt.legend(loc='upper left')
plt.ylim([0, 1])

# ============================== Top-n important ==============================

ours = [69.59, 77.90, 73.51]

n = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
#      1      2      3      4      5      6      7      8      9      10     11     12     13     14     15     16     17     18     19     20
p = [67.47, 69.06, 68.38, 67.79, 68.93, 67.94, 68.31, 69.18, 68.84, 69.01, 68.08, 69.82, 68.95, 69.71, 70.56, 70.24, 69.78, 69.73, 69.71, 70.17]
r = [79.10, 77.60, 78.63, 79.28, 78.12, 79.42, 78.91, 78.19, 78.84, 78.57, 79.83, 77.63, 78.68, 77.90, 76.90, 77.12, 77.68, 77.72, 77.70, 77.23]
f = [72.82, 73.08, 73.15, 73.09, 73.24, 73.23, 73.23, 73.41, 73.50, 73.48, 73.49, 73.52, 73.49, 73.58, 73.59, 73.52, 73.52, 73.50, 73.49, 73.53]

plt.figure()
plt.plot(n, p, '.-', label='Precision (top-n)')
plt.plot(n, r, '.-', label='Recall (top-n)')
plt.plot(n, f, '.-', label='F1-score (top-n)')
plt.plot([n[0], n[-1]], [ours[0], ours[0]], '--', label='Precision (all features)')
plt.plot([n[0], n[-1]], [ours[1], ours[1]], '--', label='Recall (all features)')
plt.plot([n[0], n[-1]], [ours[2], ours[2]], '--', label='F1-score (all features)')
plt.xlabel('Number of Used Top-n Important Factors')
plt.ylabel('Performance Metric (%)')
plt.xticks([1, 5, 10, 15, 20], ['1', '5', '10', '15', '20'])
plt.legend(loc='upper left', bbox_to_anchor=(0.9, 1.13), framealpha=0.99)

# ============================== Top-n important x 分來訪次數的辨識率 ==============================

# top_01_p = [0.6512297805856245, 0.6738776113981512, 0.6936610606225975, 0.7105985718228454, 0.7273762092409288]
# top_01_r = [0.774304030844445, 0.79677645395992, 0.8092363414400132, 0.8032278083158113, 0.8153110045246217]
# top_01_f = [0.7074535677000251, 0.7301913633732594, 0.7470042394445833, 0.7540787555121783, 0.7688369205543951]

# top_02_p = [0.6729891389364875, 0.6871268941241195, 0.7034190297632072, 0.7167694892222268, 0.7344290655321716]
# top_02_r = [0.7509440589487183, 0.7864400839547231, 0.8010866281916431, 0.7932960888930501, 0.8124401911284083]
# top_02_f = [0.7037732474334967, 0.7200216059200537, 0.7274153071745875, 0.7444816048531895, 0.7607318786908052]

# top_03_p = [0.6602878022556854, 0.6851851850811801, 0.7017589916771438, 0.717415729934036, 0.7343120320281198]
# top_03_r = [0.7696496003539431, 0.7908199017535353, 0.8068216115886443, 0.7926753564291276, 0.813716108193392]
# top_03_f = [0.7107862019751727, 0.7342220138277175, 0.7506313472019992, 0.7531696570940943, 0.7719771073766766]

# top_04_p = [0.6555621653290034, 0.6770167878952582, 0.6951501152950603, 0.7129424774817795, 0.7277872097544462]
# top_04_r = [0.774216211401228, 0.7983531883674924, 0.8176878959198045, 0.8001241459961985, 0.8204146727845567]
# top_04_f = [0.7099652774957737, 0.7326950575693576, 0.7514558137518793, 0.7540211449747215, 0.7713295360466913]

# top_05_p = [0.6653627856522961, 0.6912172572124472, 0.7045574984884585, 0.7250859102376369, 0.7386861311711865]
# top_05_r = [0.7618336699076286, 0.7859145058188657, 0.8025958343487486, 0.7858472993259793, 0.8070175436022273]
# top_05_f = [0.7103372709063356, 0.7355299167568142, 0.7503875363334678, 0.7542443618430433, 0.7713409641569353]

# top_10_p = [0.6912088808512604, 0.7075092457456972, 0.7195796458187004, 0.7353629972275392, 0.7509090906815428]
# top_10_r = [0.7436550451617059, 0.7708479325909516, 0.785390884157745, 0.7796399746867535, 0.7904306217574384]
# top_10_f = [0.7164729755210021, 0.737821249767336, 0.7510458277709897, 0.7568539742105546, 0.7701626702528586]

# top_15_p = [0.6792305285674671, 0.695591213476306, 0.7121253036154132, 0.725704427414776, 0.7449404759687678]
# top_15_r = [0.7627996837830158, 0.7822354588678634, 0.7959553272574841, 0.783364369470289, 0.798405103413587]
# top_15_f = [0.7185930900379253, 0.7363728833078362, 0.7517098776137984, 0.7534323361013778, 0.7707462286155254]

# top_20_p = [0.668048229037826, 0.6840356440592001, 0.7055101500908225, 0.7155655091178245, 0.7381648156814247]
# top_20_r = [0.7785193641188619, 0.7934477924328227, 0.8077271352829076, 0.7932960888930501, 0.8057416265372436]
# top_20_f = [0.7190650826122641, 0.7346900695790399, 0.7531658403754091, 0.7524281143667705, 0.770473802995603]

# top_25_p = [0.6794280802656905, 0.6966750312583634, 0.7124965965933852, 0.7283304242418089, 0.7440119758251461]
# top_25_r = [0.763677878215186, 0.7782060264929561, 0.7899185026290617, 0.7771570448310632, 0.79266347662116]
# top_25_f = [0.7190931922098348, 0.7351865255707657, 0.7492122122501559, 0.7519514520265923, 0.7675670678319914]

# top_30_p = [0.6791614712687686, 0.6955163254654716, 0.7123510290594932, 0.7268011523188466, 0.7439642322670748]
# top_30_r = [0.7653464476363092, 0.779957953612481, 0.7938424386375362, 0.7827436370063664, 0.7961722485498653]
# top_30_f = [0.7196823953167413, 0.7353203372585431, 0.7508917210925458, 0.7537353041815016, 0.7691828593517029]

# img_p = [top_05_p, top_10_p, top_15_p, top_20_p, top_25_p, top_30_p]
# img_r = [top_05_r, top_10_r, top_15_r, top_20_r, top_25_r, top_30_r]
# img_f = [top_05_f, top_10_f, top_15_f, top_20_f, top_25_f, top_30_f]

# plt.figure()
# plt.subplot(3, 1, 1)
# plt.imshow(img_p)
# plt.xlabel('Visit count')
# plt.ylabel('n')
# plt.title('Precision')

# plt.subplot(3, 1, 2)
# plt.imshow(img_r)
# plt.xlabel('Visit count')
# plt.ylabel('n')
# plt.title('Recall')

# plt.subplot(3, 1, 3)
# plt.imshow(img_f)
# plt.xlabel('Visit count')
# plt.ylabel('n')
# plt.title('F1-score')

# ============================== Top-n important x 分有無病史的辨識率 ==============================

top_01_p = [0.7120886706791406, 0.3892794374958174]
top_01_r = [0.9478762507173842, 0.23877111026971412]
top_01_f = [0.8132358991729396, 0.29599061996339937]

top_02_p = [0.7138732773610796, 0.42625820550273164]
top_02_r = [0.946753114103188, 0.1749910168568108]
top_02_f = [0.8139836207575815, 0.24812084569967088]

top_03_p = [0.7133279699378107, 0.41084721715319134]
top_03_r = [0.9505819889243117, 0.2082285303255069]
top_03_f = [0.8150396712123748, 0.2763796655731351]

top_04_p = [0.7093146535134678, 0.4022606381641421]
top_04_r = [0.9563508269881381, 0.21739130430876907]
top_04_f = [0.8145131854705119, 0.2822482031751299]

top_05_p = [0.7161526599569717, 0.4179976624783804]
top_05_r = [0.9483867673602008, 0.19277757811843735]
top_05_f = [0.8160687418180493, 0.26386284100708035]

top_06_p = [0.714082994526575, 0.4079303092796845]
top_06_r = [0.95053093726003, 0.24398131508372595]
top_06_f = [0.81551350418357, 0.3053396102514704]

top_07_p = [0.7152317880519317, 0.4125647667057757]
top_07_r = [0.9483357156959191, 0.22888968734658827]
top_07_f = [0.8154516607913711, 0.29442986216715333]

top_08_p = [0.7211756429015408, 0.42776801390939617]
top_08_r = [0.9420053093249946, 0.21864893995353055]
top_08_f = [0.8169296013098944, 0.2893825031572371]

top_09_p = [0.7205046335674595, 0.42455242953179273]
top_09_r = [0.9446599958676404, 0.2385914480347482]
top_09_f = [0.8174945388457886, 0.30549758387750425]

top_10_p = [0.7209229809510086, 0.4252179743711543]
top_10_r = [0.9442515825533871, 0.2278117139367927]
top_10_f = [0.8176106839202943, 0.29667713102188376]

top_11_p = [0.7158602150262726, 0.41654613814968294]
top_11_r = [0.9516540738742263, 0.25871361835093176]
top_11_f = [0.8170855097867502, 0.3191838340177954]

top_12_p = [0.7261222068132837, 0.43528534112820394]
top_12_r = [0.9373085562110829, 0.2096658282052343]
top_12_f = [0.8183089591406276, 0.2830115654857481]

top_13_p = [0.7199766582096877, 0.42814271409531757]
top_13_r = [0.9448131508604853, 0.2306863096962475]
top_13_f = [0.817211881856833, 0.2998244134946446]

top_14_p = [0.7250009853484293, 0.43843624390265395]
top_14_r = [0.9390443127966589, 0.21559468195910983]
top_14_f = [0.8182561420584425, 0.28905170780154876]

top_15_p = [0.7298733468884145, 0.45054484473992257]
top_15_r = [0.9326118030971711, 0.1931369025883692]
top_15_f = [0.8188802030983214, 0.27037181329281745]

top_16_p = [0.7277967718562536, 0.4435876621576349]
top_16_r = [0.9346028180041555, 0.19637082281775586]
top_16_f = [0.8183357465823543, 0.27222871526952724]

top_17_p = [0.7252469379405275, 0.4399851354738071]
top_17_r = [0.9371043495539563, 0.21272008619965502]
top_17_f = [0.817675128379804, 0.2867865291818176]

top_18_p = [0.7250522826529987, 0.43578322181299806]
top_18_r = [0.9380743311753076, 0.21092346384999577]
top_18_f = [0.8179203200784059, 0.2842610615900657]

top_19_p = [0.725878493192384, 0.4313367419900158]
top_19_r = [0.9375127628682095, 0.21218109949475725]
top_19_f = [0.8182319584330384, 0.2844407910629717]

top_20_p = [0.7275615567622096, 0.44209265158063393]
top_20_r = [0.9352664896398168, 0.1988860941072788]
top_20_f = [0.8184412518679983, 0.27434901429541514]

# top_25_p = [0.7267174361126957, 0.4341372911190585]
# top_25_r = [0.9353685929683802, 0.21020481491013207]
# top_25_f = [0.817945936414817, 0.2832582457121333]

# top_30_p = [0.7264879419979215, 0.43736422866134533]
# top_30_r = [0.9365938329111397, 0.2170319798388372]
# top_30_f = [0.8182685028371667, 0.29010522424021373]

# has_mh_p = [top_01_p[0], top_02_p[0], top_03_p[0], top_04_p[0], top_05_p[0], top_10_p[0], top_15_p[0], top_20_p[0], top_25_p[0], top_30_p[0]]
# has_mh_r = [top_01_r[0], top_02_r[0], top_03_r[0], top_04_r[0], top_05_r[0], top_10_r[0], top_15_r[0], top_20_r[0], top_25_r[0], top_30_r[0]]
# has_mh_f = [top_01_f[0], top_02_f[0], top_03_f[0], top_04_f[0], top_05_f[0], top_10_f[0], top_15_f[0], top_20_f[0], top_25_f[0], top_30_f[0]]

# no_mh_p = [top_01_p[1], top_02_p[1], top_03_p[1], top_04_p[1], top_05_p[1], top_10_p[1], top_15_p[1], top_20_p[1], top_25_p[1], top_30_p[1]]
# no_mh_r = [top_01_r[1], top_02_r[1], top_03_r[1], top_04_r[1], top_05_r[1], top_10_r[1], top_15_r[1], top_20_r[1], top_25_r[1], top_30_r[1]]
# no_mh_f = [top_01_f[1], top_02_f[1], top_03_f[1], top_04_f[1], top_05_f[1], top_10_f[1], top_15_f[1], top_20_f[1], top_25_f[1], top_30_f[1]]

# n = [1, 2, 3, 4, 5, 10, 15, 20, 25, 30]

has_mh_p = [
    top_01_p[0], top_02_p[0], top_03_p[0], top_04_p[0], top_05_p[0],
    top_06_p[0], top_07_p[0], top_08_p[0], top_09_p[0], top_10_p[0],
    top_11_p[0], top_12_p[0], top_13_p[0], top_14_p[0], top_15_p[0],
    top_16_p[0], top_17_p[0], top_18_p[0], top_19_p[0], top_20_p[0],
]
has_mh_r = [
    top_01_r[0], top_02_r[0], top_03_r[0], top_04_r[0], top_05_r[0],
    top_06_r[0], top_07_r[0], top_08_r[0], top_09_r[0], top_10_r[0],
    top_11_r[0], top_12_r[0], top_13_r[0], top_14_r[0], top_15_r[0],
    top_16_r[0], top_17_r[0], top_18_r[0], top_19_r[0], top_20_r[0],
]
has_mh_f = [
    top_01_f[0], top_02_f[0], top_03_f[0], top_04_f[0], top_05_f[0],
    top_06_f[0], top_07_f[0], top_08_f[0], top_09_f[0], top_10_f[0],
    top_11_f[0], top_12_f[0], top_13_f[0], top_14_f[0], top_15_f[0],
    top_16_f[0], top_17_f[0], top_18_f[0], top_19_f[0], top_20_f[0],
]

no_mh_p = [
    top_01_p[1], top_02_p[1], top_03_p[1], top_04_p[1], top_05_p[1],
    top_06_p[1], top_07_p[1], top_08_p[1], top_09_p[1], top_10_p[1],
    top_11_p[1], top_12_p[1], top_13_p[1], top_14_p[1], top_15_p[1],
    top_16_p[1], top_17_p[1], top_18_p[1], top_19_p[1], top_20_p[1],
]
no_mh_r = [
    top_01_r[1], top_02_r[1], top_03_r[1], top_04_r[1], top_05_r[1],
    top_06_r[1], top_07_r[1], top_08_r[1], top_09_r[1], top_10_r[1],
    top_11_r[1], top_12_r[1], top_13_r[1], top_14_r[1], top_15_r[1],
    top_16_r[1], top_17_r[1], top_18_r[1], top_19_r[1], top_20_r[1],
]
no_mh_f = [
    top_01_f[1], top_02_f[1], top_03_f[1], top_04_f[1], top_05_f[1],
    top_06_f[1], top_07_f[1], top_08_f[1], top_09_f[1], top_10_f[1],
    top_11_f[1], top_12_f[1], top_13_f[1], top_14_f[1], top_15_f[1],
    top_16_f[1], top_17_f[1], top_18_f[1], top_19_f[1], top_20_f[1],
]

n = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]

plt.figure()

plt.subplot(1, 2, 1)
plt.plot(n, has_mh_p, '.-', label='Precision')
plt.plot(n, has_mh_r, '.-', label='Recall')
plt.plot(n, has_mh_f, '.-', label='F1-score')
plt.legend(loc='upper left', bbox_to_anchor=(0, 0.75))
plt.xlabel('Number of Used Top-n Important Factors')
plt.ylabel('Performance Metric (%)')
plt.xticks([1, 5, 10, 15, 20], ['1', '5', '10', '15', '20'])
plt.title('Has Hypertension in the Past')

plt.subplot(1, 2, 2)
plt.plot(n, no_mh_p, '.-', label='Precision')
plt.plot(n, no_mh_r, '.-', label='Recall')
plt.plot(n, no_mh_f, '.-', label='F1-score')
plt.legend(loc='upper left', bbox_to_anchor=(0, 0.75))
plt.xlabel('Number of Used Top-n Important Factors')
plt.ylabel('Performance Metric (%)')
plt.xticks([1, 5, 10, 15, 20], ['1', '5', '10', '15', '20'])
plt.title('No Hypertension in the Past')

# ============================== 加入不同次數 virtual visits 可下降的人數 ==============================

num_tp = 19427
num_fp = 8257
num_tp_diff = 12585
num_fp_diff = 5009
x = [1, 2, 3, 4, 5]
tp_change_cnt = np.array([690, 779, 843, 843, 843])
fp_change_cnt = np.array([947, 1049, 1014, 1020, 1015])
tp_change_ratio = tp_change_cnt / num_tp_diff
fp_change_ratio = fp_change_cnt / num_fp_diff

plt.figure()
plt.plot(x, fp_change_cnt, '.-', label='Classification result using raw feature: false positive')
plt.plot(x, tp_change_cnt, '.-', label='Classification result using raw feature: true positive')
plt.ylim(500, 1060)
plt.xticks(x, list(map(str, x)))
plt.xlabel('Number of Added Virtual Visits')
plt.ylabel('Number of Affected People')
plt.legend()
for x, tp_c, tp_r, fp_c, fp_r in zip(x, tp_change_cnt, tp_change_ratio, fp_change_cnt, fp_change_ratio):
  offset_x = 0 if x <= 3 else -0.3
  offset_y = -30 if x <= 3 else 10
  plt.text(x+offset_x, tp_c+offset_y, '{} ({:.2f}%)'.format(tp_c, tp_r*100))
  plt.text(x+offset_x, fp_c+offset_y, '{} ({:.2f}%)'.format(fp_c, fp_r*100))

# ============================================================

plt.show()
